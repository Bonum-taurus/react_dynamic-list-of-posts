{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/api/comments.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","components/api/users.tsx","components/api/posts.tsx","index.tsx"],"names":["PostsList","postsOfUser","loadComments","currentPostId","isOpenPosts","className","map","post","id","title","onClick","type","classNames","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","comments","setIsErrorComments","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","comment","setComment","commentError","setCommentError","loader","setLoader","onSubmit","event","preventDefault","trimName","trim","trimEmail","trimComment","postId","createCommentOnPost","newComment","catch","finally","onReset","htmlFor","value","onChange","target","placeholder","PostDetails","currentPost","showSpinner","isNotComments","isErrorComments","openForm","setOpenForm","hendleDeleteComment","href","UserSelector","user","setUser","users","loadPosts","dropdown","setDropdown","activeUserId","role","App","setUsers","posts","setPosts","setIsOpenPosts","openDropdown","setOpenDropdown","setActiveUserId","isNotPosts","setIsNotPosts","setShowSpinner","isError","setIsError","setCurrentPostId","showSpinnerComments","setShowSpinnerComments","setIsNotComments","useEffect","useMemo","neededPost","find","userId","getPostsOfUser","postsOfUsers","length","getCommentsOfPost","commentsPost","commentId","copyComments","deletedComment","index","indexOf","splice","deleteCommentFromPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac0edafa.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  postsOfUser: Post[],\n  loadComments: (postId: number) => void,\n  currentPostId: number,\n  isOpenPosts: boolean,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsOfUser,\n  loadComments,\n  currentPostId,\n  isOpenPosts,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {postsOfUser.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                onClick={() => loadComments(post.id)}\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button is-link', {\n                  'is-light': currentPostId !== post.id,\n                })}\n              >\n                {currentPostId === post.id && isOpenPosts ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { createCommentOnPost } from './api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  currentPostId: number,\n  setComments: (comments: Comment[]) => void,\n  comments: Comment[],\n  setIsErrorComments: (value: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  currentPostId,\n  setComments,\n  comments,\n  setIsErrorComments,\n}) => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n\n  const [comment, setComment] = useState('');\n  const [commentError, setCommentError] = useState(false);\n\n  const [loader, setLoader] = useState(false);\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setNameError(false);\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setEmailError(false);\n  };\n\n  const handleChangeComment = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setComment(event.target.value);\n    setCommentError(false);\n  };\n\n  const handleSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimName = name.trim();\n    const trimEmail = email.trim();\n    const trimComment = comment.trim();\n\n    setNameError(!trimName);\n    setEmailError(!trimEmail);\n    setCommentError(!trimComment);\n\n    if (!trimName || !trimEmail || !trimComment) {\n      return;\n    }\n\n    setLoader(true);\n\n    createCommentOnPost({\n      postId: currentPostId,\n      name: trimName,\n      email: trimEmail,\n      body: trimComment,\n    })\n      .then(newComment => {\n        setComments([...comments, newComment]);\n        setComment('');\n      })\n      .catch(() => setIsErrorComments(true))\n      .finally(() => setLoader(false));\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitComment}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={name}\n            onChange={handleChangeName}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameError })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={email}\n            onChange={handleChangeEmail}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailError })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={comment}\n            onChange={handleChangeComment}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': commentError })}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': loader })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../../types/Comment';\nimport { client } from '../../utils/fetchClient';\n\nexport const getCommentsOfPost = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createCommentOnPost = ({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteCommentFromPost = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  comments: Comment[],\n  currentPost: Post,\n  showSpinner: boolean,\n  isNotComments: boolean,\n  isErrorComments: boolean,\n  openForm: boolean,\n  setOpenForm: (value: boolean) => void,\n  currentPostId: number,\n  setComments: (comments: Comment[]) => void\n  setIsErrorComments: (value: boolean) => void,\n  hendleDeleteComment: (commentId: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  currentPost,\n  comments,\n  showSpinner,\n  isNotComments,\n  isErrorComments,\n  openForm,\n  setOpenForm,\n  currentPostId,\n  setComments,\n  setIsErrorComments,\n  hendleDeleteComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost.id}: ${currentPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {showSpinner && <Loader />}\n\n          {isErrorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isNotComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!showSpinner && !isNotComments && !isErrorComments\n            && <p className=\"title is-4\">Comments:</p>}\n\n          {!isErrorComments\n            && comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    onClick={() => hendleDeleteComment(comment.id)}\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n\n          {!showSpinner && !isErrorComments && !openForm && (\n            <button\n              onClick={() => setOpenForm(true)}\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {openForm && !isErrorComments && (\n          <NewCommentForm\n            currentPostId={currentPostId}\n            setComments={setComments}\n            comments={comments}\n            setIsErrorComments={setIsErrorComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  loadPosts: (userId: number) => void,\n  dropdown: boolean,\n  setDropdown: (value: boolean) => void,\n  activeUserId: number,\n  user: string,\n  setUser: (name: string) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  user,\n  setUser,\n  users,\n  loadPosts,\n  dropdown,\n  setDropdown,\n  activeUserId,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          onClick={() => setDropdown(!dropdown)}\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          <span>{user}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              onClick={() => {\n                setUser(name);\n                loadPosts(id);\n              }}\n              href={`#user-${id}`}\n              className={classNames('dropdown-item', {\n                'is-active': activeUserId === id,\n              })}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './components/api/users';\nimport { Post } from './types/Post';\nimport { getPostsOfUser } from './components/api/posts';\nimport {\n  deleteCommentFromPost, getCommentsOfPost,\n} from './components/api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [user, setUser] = useState('Choose a user');\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isOpenPosts, setIsOpenPosts] = useState(false);\n  const [openDropdown, setOpenDropdown] = useState(false);\n  const [activeUserId, setActiveUserId] = useState(0);\n  const [isNotPosts, setIsNotPosts] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [currentPostId, setCurrentPostId] = useState(0);\n  const [showSpinnerComments, setShowSpinnerComments] = useState(false);\n  const [isNotComments, setIsNotComments] = useState(false);\n  const [isErrorComments, setIsErrorComments] = useState(false);\n  const [openForm, setOpenForm] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const handleClickLoadPosts = (userId: number) => {\n    setPosts([]);\n    setCurrentPostId(0);\n    setIsError(false);\n    setShowSpinner(true);\n    setIsNotPosts(false);\n    getPostsOfUser(userId)\n      .then(postsOfUsers => {\n        if (!postsOfUsers.length) {\n          setIsNotPosts(true);\n        }\n\n        if (postsOfUsers.length) {\n          setIsNotPosts(false);\n        }\n\n        setPosts(postsOfUsers);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setShowSpinner(false));\n    setOpenDropdown(false);\n    setActiveUserId(userId);\n  };\n\n  const handleClickLoadComments = (postId: number) => {\n    if (isOpenPosts) {\n      setIsOpenPosts(false);\n      setCurrentPostId(0);\n\n      return;\n    }\n\n    setIsOpenPosts(true);\n    setOpenForm(false);\n    setIsNotComments(false);\n    setIsErrorComments(false);\n    setComments([]);\n    setShowSpinnerComments(true);\n    setCurrentPostId(postId);\n    getCommentsOfPost(postId)\n      .then(commentsPost => {\n        if (!commentsPost.length) {\n          setIsNotComments(true);\n        }\n\n        if (commentsPost.length) {\n          setIsNotComments(false);\n        }\n\n        setComments(commentsPost);\n      })\n      .catch(() => setIsErrorComments(true))\n      .finally(() => setShowSpinnerComments(false));\n  };\n\n  const currentPost = useMemo(() => {\n    const neededPost = posts.find(post => post.id === currentPostId);\n\n    if (neededPost) {\n      return neededPost;\n    }\n\n    return {\n      id: 0, userId: 0, title: '', body: '',\n    };\n  }, [currentPostId]);\n\n  const hendleDeleteComment = (commentId: number) => {\n    const copyComments = [...comments];\n    const deletedComment = copyComments\n      .find(comment => comment.id === commentId);\n\n    if (deletedComment) {\n      const index = copyComments.indexOf(deletedComment);\n\n      copyComments.splice(index, 1);\n      setComments(copyComments);\n    }\n\n    deleteCommentFromPost(commentId)\n      .catch(() => setComments(comments));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  user={user}\n                  setUser={setUser}\n                  users={users}\n                  loadPosts={handleClickLoadPosts}\n                  dropdown={openDropdown}\n                  setDropdown={setOpenDropdown}\n                  activeUserId={activeUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {showSpinner && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isNotPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts.length && (\n                  <PostsList\n                    postsOfUser={posts}\n                    loadComments={handleClickLoadComments}\n                    currentPostId={currentPostId}\n                    isOpenPosts={isOpenPosts}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {isOpenPosts && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': isOpenPosts },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  comments={comments}\n                  currentPost={currentPost}\n                  showSpinner={showSpinnerComments}\n                  isNotComments={isNotComments}\n                  isErrorComments={isErrorComments}\n                  openForm={openForm}\n                  setOpenForm={setOpenForm}\n                  currentPostId={currentPostId}\n                  setComments={setComments}\n                  setIsErrorComments={setIsErrorComments}\n                  hendleDeleteComment={hendleDeleteComment}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\nexport const getPostsOfUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}